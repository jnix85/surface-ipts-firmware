name: Release

on:
  push:
    tags:
      - v[0-9]+.*
      - testing-ci.*

jobs:
  build-arch:
    name: Build Arch Linux Package
    runs-on: ubuntu-latest
    container: archlinux
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: pacman -Sy --noconfirm sudo binutils fakeroot base-devel

    - name: Build package
      run: |
        cd pkg/arch

        # Fix permissions (can't makepkg as root)
        echo "nobody ALL=(ALL) NOPASSWD: /usr/bin/pacman" >> /etc/sudoers
        chown -R nobody .

        # Package compression settings (Matches latest Arch)
        export PKGEXT='.pkg.tar.zst'
        export COMPRESSZST=(zstd -c -T0 --ultra -20 -)

        # Build
        su nobody --pty -p -s /bin/bash -c 'makepkg -f --noconfirm'

    - name: Sign package
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/arch

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes
        export GPG_TTY=$(tty)

        # sign package
        ls *.pkg.tar.zst | xargs -L1 gpg --detach-sign --batch --no-tty -u $GPG_KEY_ID

    - name: Prepare release
      run: |
        mkdir release
        mv ./pkg/arch/*.pkg.tar.zst{,.sig} release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: arch-latest
        path: release

  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-latest
    container: debian:sid
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sed 's/^deb /deb-src /' /etc/apt/sources.list >> /etc/apt/sources.list
        apt-get -y update
        apt-get -y install build-essential fakeroot debhelper dpkg-sig

    - name: Build package
      run: ./pkg/debian/makedeb

    - name: Sign package
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/debian

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes
        export GPG_TTY=$(tty)

        # sign package
        dpkg-sig -g "--batch --no-tty" --sign builder -k $GPG_KEY_ID ./*.deb

    - name: Prepare release
      run: |
        mkdir release
        mv ./pkg/debian/*.deb release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: debian-latest
        path: release

  build-f31:
    name: Build Fedora 31 package
    runs-on: ubuntu-latest
    container: fedora:31
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install build dependencies
      run: |
        dnf distro-sync -y
        dnf install -y rpmdevtools rpm-sign 'dnf-command(builddep)'
        dnf builddep -y pkg/fedora/surface-firmware.spec

    - name: Build package
      run: |
        cd pkg/fedora
        # Build the .rpm packages
        ./makerpm

    - name: Sign packages
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/fedora/out/noarch

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes

        # sign package
        rpm --resign *.rpm --define "_gpg_name $GPG_KEY_ID"

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: fedora-31-latest
        path: pkg/fedora/out/noarch

  release:
    name: Publish release
    needs: [build-deb, build-arch, build-f31]
    runs-on: ubuntu-latest
    steps:
    - name: Download Debian artifacts
      uses: actions/download-artifact@v1
      with:
        name: debian-latest

    - name: Download Arch Linux artifacts
      uses: actions/download-artifact@v1
      with:
        name: arch-latest

    - name: Download Fedora 31 artifacts
      uses: actions/download-artifact@v1
      with:
        name: fedora-31-latest

    - name: Upload assets
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./*-latest/*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
